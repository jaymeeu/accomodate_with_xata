// Generated by Xata Codegen 0.18.0. Please do not edit.
import { buildClient } from "@xata.io/client";
/** @typedef { import('./types').SchemaTables } SchemaTables */
/** @type { SchemaTables } */
const tables = [
  {
    name: "users",
    columns: [
      { name: "fullname", type: "string" },
      { name: "email", type: "email" },
      { name: "password", type: "string" },
    ],
  },
  {
    name: "homes",
    columns: [
      { name: "title", type: "string" },
      { name: "price", type: "float" },
      { name: "dateFrom", type: "datetime" },
      { name: "images_links", type: "multiple" },
      { name: "location", type: "string" },
      { name: "lat", type: "float" },
      { name: "dateTill", type: "datetime" },
      { name: "lng", type: "float" },
      { name: "category", type: "string" },
      { name: "host", type: "link", link: { table: "users" } },
    ],
  },
];
/** @type { import('@xata.io/client').ClientConstructor<{}> } */
const DatabaseClient = buildClient();
const defaultOptions = {
  databaseURL:
    "https://rasaq-adewuyi-s-workspace-pki63j.us-east-1.xata.sh/db/accomodate",
};
/** @typedef { import('./types').DatabaseSchema } DatabaseSchema */
/** @extends DatabaseClient<DatabaseSchema> */
export class XataClient extends DatabaseClient {
  constructor(options) {
    super({ ...defaultOptions, ...options }, tables);
  }
}
let instance = undefined;
/** @type { () => XataClient } */
export const getXataClient = () => {
  if (instance) return instance;
  instance = new XataClient();
  return instance;
};
